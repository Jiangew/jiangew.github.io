---
title: "Vert.x 从入门到放弃"
layout: post
date: 2017-07-14 15:45
image: /assets/images/markdown.jpg
headerImage: false
tag:
- Vert.x
- Java
category: blog
author: JamesiWorks
---

### What is Vert.x ?
Vert.x is a tool-kit for building reactive applications on the JVM.

### Maven Verticle Project
#### 01 使用 maven-shade-plugin 插件构建 fat-jar 包，包含了所有依赖
「maven:maven-shade-plugin」
```java
    <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>2.3</version>
        <executions>
            <execution>
               <phase>package</phase>
               <goals>
                   <goal>shade</goal>
               </goals>
               <configuration>
                   <transformers>
                       <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                           <manifestEntries>
                               <Main-Class>io.vertx.core.Launcher</Main-Class>
                               <Main-Verticle>${main.verticle}</Main-Verticle>
                           </manifestEntries>
                       </transformer>
                       <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                           <resource>META-INF/services/io.vertx.core.spi.VerticleFactory</resource>
                       </transformer>
                   </transformers>
                   <artifactSet>
                   </artifactSet>
                   <outputFile>${project.build.directory}/${project.artifactId}-${project.version}-fat.jar</outputFile>
               </configuration>
            </execution>
        </executions>
    </plugin>
```
```java
    mvn clean package
```

#### 02 运行 fat-jar
```java
    java -jar target/maven-verticle-3.4.2-fat.jar
```

#### 03 通过 -instances 参数部署多个 verticle 实例来释放多核的能力
```java
    java -jar target/maven-verticle-3.4.2-fat.jar -instances 8
```

#### 04 通过 -cluster && -ha 参数部署 verticle 实例，开启集群和高可用模式
```java
    java -jar target/maven-verticle-3.4.2-fat.jar -cluster
    java -jar target/maven-verticle-3.4.2-fat.jar -ha
```

#### 05 通过 -conf 部署 verticle 实例时加载配置文件
```java
    java -jar target/maven-verticle-3.4.2-fat.jar -conf src/conf/conf.json
```

### blockingHandler|executeBlocking vs WorkerVerticle
每一个阻塞的耗时操作单独 deploy 一个 worker verticle 处理，一个 worker verticle 一直被线程池中的一个线程执行。
「executeBlocking 示例」
```java
    vertx.createHttpServer().requestHandler(request -> vertx.<String>executeBlocking(future -> {
            // do blocking operation
            try {
                Thread.sleep(500);
            } catch (Exception e) {
                // ignore
            }

            String result = "jamesiworks";
            future.complete(result);
        }, res -> {
            if (res.succeeded()) {
                request.response().putHeader("content-type", "text/plain").end(res.result());
            } else {
                res.cause().printStackTrace();
            }
        })).listen(8080);
```
「blockingHandler 示例」
```java
        // blocking handler && ordered false && future
        router.get("/chaptersAsync").blockingHandler(this::handleGetChaptersAsync, false).failureHandler(this::handleWorkerTimeout);
```

### Dynamic Deploy Verticle
通过动态部署 Verticle 实例，可是指定 DeploymentOptions 的各种属性，可以对比 VertxOptions，包括 workerPoolSize, isWorker, isHA 等。
```java
        // different ways of deploying verticles
        // 01 deploy a verticle and do not wait for it to start
        vertx.deployVerticle("com.qq.reader.ts.verticle.DownloadVerticle");

        // 02 deploy a verticle and wait for it to start
        vertx.deployVerticle("com.qq.reader.ts.verticle.DownloadVerticle", res -> {
            if (res.succeeded()) {
                String deployId = res.result();
                System.out.println("DeployVerticle deployed ok, deployId = " + deployId);
            }
        });

        // 03 deploy a verticle with options
        int core = Runtime.getRuntime().availableProcessors();
        vertx.deployVerticle("com.qq.reader.ts.verticle.DownloadVerticle",
                new DeploymentOptions()
                        .setInstances(core)
                        .setHa(true)
                        .setWorkerPoolName("vertx-work-pool-ts")
                        .setWorkerPoolSize(core * 50)
                        .setMaxWorkerExecuteTime(VertxOptions.DEFAULT_MAX_WORKER_EXECUTE_TIME)
        );    
```

### 健康检查「Health Checks」

### 监控「Dropwizard | Hawkular」

### 日志

### 参考
- [Vert.x Official Document](http://vertx.io/docs/)
- [Vert.x Official Examples](https://github.com/vert-x3/vertx-examples)
